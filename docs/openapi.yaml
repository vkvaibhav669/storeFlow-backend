openapi: 3.0.3
info:
  title: storeFlow Backend API
  description: |
    OpenAPI specification providing CRUD (GET, POST, PUT, DELETE) for main resources.
    Schemas include required fields so users can play with data through Swagger UI or any OpenAPI client.
  version: "1.0.0"
servers:
  - url: "http://localhost:3000"
    description: Local development server
security:
  - bearerAuth: []
tags:
  - name: Products
    description: Product management (CRUD)
  - name: Users
    description: User management and authentication
  - name: Orders
    description: Orders and checkout
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: "Not found"
        code:
          type: integer
          example: 404
    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 250
    Product:
      type: object
      required:
        - id
        - name
        - price
        - stock
      properties:
        id:
          type: string
          format: uuid
          example: "8a1f0b2c-5d1e-4a3b-9f3a-0d4c6bfae7a1"
        name:
          type: string
          example: "Wireless Mouse"
        description:
          type: string
          example: "Ergonomic wireless mouse with USB receiver"
        price:
          type: number
          format: float
          example: 29.99
        currency:
          type: string
          example: "USD"
        stock:
          type: integer
          example: 150
        tags:
          type: array
          items:
            type: string
    ProductCreate:
      type: object
      required:
        - name
        - price
        - stock
      properties:
        name:
          type: string
          example: "Wireless Mouse"
        description:
          type: string
          example: "Ergonomic wireless mouse with USB receiver"
        price:
          type: number
          format: float
          example: 29.99
        currency:
          type: string
          example: "USD"
        stock:
          type: integer
          example: 150
        tags:
          type: array
          items:
            type: string
    ProductUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        currency:
          type: string
        stock:
          type: integer
        tags:
          type: array
          items:
            type: string
    User:
      type: object
      required:
        - id
        - email
        - name
      properties:
        id:
          type: string
          format: uuid
          example: "b3e9a6f2-1f9a-4c44-9a7b-3c2a9e6d5f1a"
        name:
          type: string
          example: "Jane Doe"
        email:
          type: string
          format: email
          example: "jane@example.com"
        role:
          type: string
          example: "user"
    UserCreate:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: "Jane Doe"
        email:
          type: string
          format: email
          example: "jane@example.com"
        password:
          type: string
          format: password
          example: "P@ssw0rd!"
    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    Order:
      type: object
      required:
        - id
        - userId
        - items
        - total
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        items:
          type: array
          items:
            type: object
            required: [productId, quantity, price]
            properties:
              productId:
                type: string
              quantity:
                type: integer
              price:
                type: number
        total:
          type: number
paths:
  /products:
    get:
      tags:
        - Products
      summary: List products
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: q
          in: query
          schema:
            type: string
            example: "mouse"
      responses:
        "200":
          description: A paginated list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Products
      summary: Create a product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        "201":
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Validation error (missing required fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}:
    parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Products
      summary: Get a single product by id
      responses:
        "200":
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Products
      summary: Update a product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        "200":
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Products
      summary: Delete a product
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Product deleted (no content)
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      tags:
        - Users
      summary: List users
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Users
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Validation error (missing required fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get user by id
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Users
      summary: Update user (partial or full)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Users
      summary: Delete user
      security:
        - bearerAuth: []
      responses:
        "204":
          description: User deleted
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders:
    post:
      tags:
        - Orders
      summary: Create an order (checkout)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - items
              properties:
                userId:
                  type: string
                items:
                  type: array
                  items:
                    type: object
                    required:
                      - productId
                      - quantity
                    properties:
                      productId:
                        type: string
                      quantity:
                        type: integer
                        minimum: 1
      responses:
        "201":
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Orders
      summary: List orders for authenticated user (admin can list all)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: Orders list
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/{orderId}:
    parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Orders
      summary: Get order by id
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'