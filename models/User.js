// models/User.js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs'); // For password hashing

const UserSchema = new mongoose.Schema({
  // _id is automatically generated by MongoDB
  name: {
    type: String,
    required: true,
    trim: true // Remove whitespace from both ends of a string
  },
  email: {
    type: String,
    required: true,
    unique: true, // Ensure email addresses are unique
    lowercase: true, // Store emails in lowercase
    trim: true,
    match: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/ // Regex for email validation
  },
  password: {
    type: String,
    required: true,
    minlength: 6 // Minimum password length
  },
  role: {
    type: String,
    required: true,
    enum: ["Member", "Admin", "SuperAdmin"], // Allowed roles
    default: "Member" // Default role for new users
  },
  department: {
    type: String,
    trim: true
    // You can add enum: [...] if you want to restrict to certain departments
  }
}, {
  timestamps: true // Adds createdAt and updatedAt fields automatically
});

// --- Pre-save hook to hash password before saving ---
UserSchema.pre('save', async function(next) {
  // Only hash the password if it has been modified (or is new)
  if (!this.isModified('password')) {
    return next();
  }
  // Generate a salt (random string) with 10 rounds
  const salt = await bcrypt.genSalt(10);
  // Hash the password using the generated salt
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// --- Method to compare entered password with hashed password in DB ---
UserSchema.methods.matchPassword = async function(enteredPassword) {
  // Compare the entered plain text password with the hashed password
  return await bcrypt.compare(enteredPassword, this.password);
};

// Export the User model
module.exports = mongoose.model('User', UserSchema, 'users');
