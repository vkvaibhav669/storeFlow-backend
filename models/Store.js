// models/Store.js
const mongoose = require('mongoose');
const CommentSchema = require('./Comment'); // Import the reusable Comment Schema

// Sub-schema for ImprovementPoint
const ImprovementPointSchema = new mongoose.Schema({
  _id: { type: mongoose.Schema.Types.ObjectId, auto: true }, // Mongoose will auto-generate _id
  text: { type: String, required: true },
  addedById: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  addedByName: { type: String, required: true },
  addedAt: { type: Date, default: Date.now, required: true },
  isResolved: { type: Boolean, default: false, required: true },
  resolvedById: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  resolvedBy: { type: String },
  resolvedAt: { type: Date },
  comments: [CommentSchema] // Array of embedded CommentSchema (recursive)
}); // Removed `{ _id: false }` from here. Mongoose will generate _id by default.

// Sub-schema for StoreTask
const StoreTaskSchema = new mongoose.Schema({
  _id: { type: mongoose.Schema.Types.ObjectId, auto: true }, // Mongoose will auto-generate _id
  title: { type: String, required: true },
  description: { type: String },
  assignedTo: { type: String }, // Can be a role like 'Store Manager' or a specific person's name.
  status: {
    type: String,
    required: true,
    enum: ["Pending", "In Progress", "Completed", "Blocked"],
    default: "Pending"
  },
  priority: {
    type: String,
    required: true,
    enum: ["High", "Medium", "Low", "None"],
    default: "None"
  },
  createdById: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  createdBy: { type: String, required: true },
  createdAt: { type: Date, default: Date.now, required: true },
  dueDate: { type: Date }
}); // Removed `{ _id: false }` from here. Mongoose will generate _id by default.

// Main Store Schema
const StoreSchema = new mongoose.Schema({
  // _id is automatically generated by MongoDB by default
  name: { type: String, required: true, trim: true },
  location: { type: String, required: true, trim: true },
  type: {
    type: String,
    required: true,
    enum: ["COCO", "FOFO"]
  },
  status: {
    type: String,
    required: true,
    enum: ["Operational", "Under Construction", "Planned"]
  },
  openingDate: { type: Date, required: true },
  managerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, // Reference to User
  manager: { type: String }, // Denormalized manager name
  sqft: { type: Number },
  ownershipChangeRequested: { type: Boolean, default: false },
  fromProjectId: { type: mongoose.Schema.Types.ObjectId, ref: 'StoreProject' }, // Reference to StoreProject

  improvementPoints: [ImprovementPointSchema], // Array of embedded ImprovementPointSchema
  tasks: [StoreTaskSchema] // Array of embedded StoreTaskSchema
}, {
  timestamps: true // Adds createdAt and updatedAt fields automatically
});


module.exports = mongoose.model('Store', StoreSchema, 'stores');


// Export the Store model