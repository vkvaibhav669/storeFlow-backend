// models/StoreProject.js
const mongoose = require('mongoose');
const CommentSchema = require('./Comment'); // Import the reusable Comment Schema

// Sub-schema for MarketingCampaign
const MarketingCampaignSchema = new mongoose.Schema({
  _id: { type: mongoose.Schema.Types.ObjectId, auto: true }, // Mongoose will auto-generate _id
  name: { type: String },
  type: {
    type: String,
    enum: ["Digital", "Offline", "Influencer", "Hyperlocal"]
  },
  status: {
    type: String,
    enum: ["Planned", "Ongoing", "Completed", "Cancelled"]
  },
  startDate: { type: Date },
  endDate: { type: Date },
  budget: { type: Number }
}); // Removed `{ _id: false }`

// Sub-schema for DepartmentDetails
const DepartmentDetailsSchema = new mongoose.Schema({
  notes: { type: String },
  // tasks here reference to ObjectId of tasks in the main 'tasks' array
  // Note: 'ref' to 'StoreProject.tasks' refers to an embedded subdocument path,
  // which is not directly supported for Mongoose population like a top-level model.
  // If 'tasks' here are meant to reference *specific* tasks within *this* project,
  // you might handle this in application logic or use a different referencing approach.
  tasks: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Task' }], // Changed ref to 'Task' if tasks are a separate collection, or simply array of ObjectIds if just identifiers
  preLaunchCampaigns: [MarketingCampaignSchema],
  postLaunchCampaigns: [MarketingCampaignSchema],
  virtualPlanUrl: { type: String },
  recruitmentStatus: { type: String },
  staffHired: { type: Number },
  totalNeeded: { type: Number }
}); // Removed `{ _id: false }`

// Main StoreProject Schema
const StoreProjectSchema = new mongoose.Schema({
  // _id is automatically generated by MongoDB as ObjectId
  name: { type: String, required: true, trim: true },
  location: { type: String, required: true, trim: true },
  status: {
    type: String,
    required: true,
    enum: [
      "Planning",
      "Property Finalized",
      "Project Kickoff",
      "Execution",
      "Merchandising",
      "Recruitment",
      "Pre-Launch Marketing",
      "Launched",
      "Post-Launch Marketing"
    ]
  },
  startDate: { type: Date, required: true },
  projectedLaunchDate: { type: Date, required: true },
  currentProgress: { type: Number, default: 0 }, // Default value
  isUpcoming: { type: Boolean, default: false }, // Default value
  franchiseType: { type: String, enum: ["COCO", "FOFO"] },
  threeDRenderUrl: { type: String },

  // createdAt and updatedAt are automatically managed by timestamps: true
  // createdAt: { type: Date, required: true, default: Date.now },
  // updatedAt: { type: Date, required: true, default: Date.now },

  propertyDetails: {
    address: { type: String },
    sqft: { type: Number },
    status: { type: String, enum: ["Identified", "Negotiating", "Finalized"] },
    notes: { type: String }
  },

  projectTimeline: {
    totalDays: { type: Number },
    currentDay: { type: Number },
    kickoffDate: { type: Date }
  },

  members: [{
    _id: { type: mongoose.Schema.Types.ObjectId, auto: true }, // Mongoose will auto-generate _id
    userId: { type: mongoose.Schema.Types.ObjectId, required: true, ref: 'User' }, // Reference to a User model
    name: { type: String, required: true },
    email: { type: String, required: true },
    roleInProject: { type: String },
    department: { type: String },
    isProjectHod: { type: Boolean }
  }],

  tasks: [{
    _id: { type: mongoose.Schema.Types.ObjectId, auto: true }, // Mongoose will auto-generate _id
    name: { type: String, required: true },
    department: { type: String, required: true },
    status: {
      type: String,
      required: true,
      enum: ["Pending", "In Progress", "Completed", "Blocked"],
      default: "Pending"
    },
    priority: { type: String, enum: ["High", "Medium", "Low", "None"] },
    assignedToId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    assignedToName: { type: String },
    dueDate: { type: Date },
    description: { type: String },
    comments: [CommentSchema], // Array of embedded CommentSchema (recursive)
    createdAt: { type: Date, default: Date.now, required: true }
  }],

  documents: [{
    _id: { type: mongoose.Schema.Types.ObjectId, auto: true }, // Mongoose will auto-generate _id
    name: { type: String },
    type: {
      type: String,
      enum: ["3D Render", "Property Document", "Marketing Collateral", "Other"]
    },
    url: { type: String },
    size: { type: String }, // Consider 'Number' if representing bytes, 'String' for "KB", "MB" etc.
    uploadedById: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    uploadedBy: { type: String },
    uploadedAt: { type: Date, default: Date.now },
    hodOnly: { type: Boolean },
    dataAiHint: { type: String }
  }],

  milestones: [{
    _id: { type: mongoose.Schema.Types.ObjectId, auto: true }, // Mongoose will auto-generate _id
    name: { type: String },
    description: { type: String },
    date: { type: Date },
    completed: { type: Boolean }
  }],

  blockers: [{
    _id: { type: mongoose.Schema.Types.ObjectId, auto: true }, // Mongoose will auto-generate _id
    title: { type: String },
    description: { type: String },
    reportedById: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    reportedBy: { type: String },
    dateReported: { type: Date, default: Date.now },
    isResolved: { type: Boolean },
    dateResolved: { type: Date }
  }],

  discussion: [CommentSchema], // Array of embedded CommentSchema (recursive)

  departments: {
    property: DepartmentDetailsSchema,
    project: DepartmentDetailsSchema,
    merchandising: DepartmentDetailsSchema,
    hr: DepartmentDetailsSchema,
    marketing: DepartmentDetailsSchema,
    it: DepartmentDetailsSchema
  }
}, {
  timestamps: true // Automatically adds createdAt and updatedAt fields
});

module.exports = mongoose.model('StoreProject', StoreProjectSchema, 'projects');
